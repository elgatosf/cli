import { action, KeyDownEvent, SingletonAction, WillAppearEvent } from "@elgato/streamdeck";

/**
 * <%= description %>
 */
@action({ UUID: "<%= uuid %>" })
export class <%= className %> extends SingletonAction<Settings> {
	/**
	 * The {@link SingletonAction.onWillAppear} event is useful for setting the visual representation of an action when it becomes visible. This could be due to the Stream Deck first
	 * starting up, or the user navigating between pages / folders etc.. There is also an inverse of this event in the form of {@link streamDeck.client.onWillDisappear}. In this example,
	 * we're setting up the initial state of the action.
	 */
	override onWillAppear(ev: WillAppearEvent<Settings>): void | Promise<void> {
		// TODO: Implement action appearance logic
		return ev.action.setTitle("<%= name %>");
	}

	/**
	 * Listens for the {@link SingletonAction.onKeyDown} event which is emitted by Stream Deck when an action is pressed. Stream Deck provides various events for tracking interaction
	 * with devices including key down/up, dial rotations, and device connectivity, etc. When triggered, {@link ev} object contains information about the event including any payloads
	 * and action information where applicable.
	 */
	override async onKeyDown(ev: KeyDownEvent<Settings>): Promise<void> {
		// TODO: Implement action key down logic
		const { settings } = ev.payload;
		
		// Example: Update action title or perform some action
		await ev.action.setTitle("Pressed!");
	}
}

/**
 * Settings for {@link <%= className %>}.
 */
type Settings = {
	// TODO: Define your action settings here
	// Example:
	// someProperty?: string;
	// count?: number;
};
