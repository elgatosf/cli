import commonjs from "@rollup/plugin-commonjs";
import nodeResolve from "@rollup/plugin-node-resolve";
import terser from "@rollup/plugin-terser";
import typescript from "@rollup/plugin-typescript";
import path from "node:path";
import url from "node:url";

const isWatching = !!process.env.ROLLUP_WATCH;

/**
 * @type {import('rollup').RollupOptions}
 */
const config = {
	input: "src/plugin.ts",
	output: {
		dir: "<%- uuid %>.sdPlugin/bin",
		format: "cjs",
		sourcemap: isWatching,
		sourcemapPathTransform: (relativeSourcePath, sourcemapPath) => {
			return url.pathToFileURL(path.resolve(path.dirname(sourcemapPath), relativeSourcePath)).href;
		}
	},
	plugins: [
		typescript({
			sourceMap: isWatching,
			inlineSources: isWatching,
			mapRoot: isWatching ? "./" : undefined
		}),
		commonjs({
			sourceMap: false
		}),
		nodeResolve({
			browser: false,
			exportConditions: ["node"],
			preferBuiltins: true
		}),
		!isWatching &&
			terser({
				format: {
					comments: false
				}
			})
	]
};
<% if (isPreBuild) { %>
/*
 * This is an intermediary fix for an upstream issue that causes the build process to hang indefinitely (particularly on macOS).
 * As part of the creation of the plugin, this temporary rollup-plugin is applied during the build step, but removed as part of
 * the finalizing process. If you're seeing this as part of the final output, you can safely remove it.
 * See also https://github.com/rollup/plugins/issues/983
 */
config.plugins.push({
	closeBundle() {
		process.exit(0);
	},
});
/*
 * End of fix.
 */
<% } %>
export default config;
